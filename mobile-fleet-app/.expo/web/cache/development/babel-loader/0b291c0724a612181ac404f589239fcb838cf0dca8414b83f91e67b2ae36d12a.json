{"ast":null,"code":"var _jsxFileName = \"/home/runner/workspace/mobile-fleet-app/src/contexts/AuthContext.tsx\";\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { supabase } from '../lib/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = createContext(undefined);\nexport function AuthProvider({\n  children\n}) {\n  const [session, setSession] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    supabase.auth.getSession().then(({\n      data: {\n        session\n      }\n    }) => {\n      setSession(session);\n      setLoading(false);\n    });\n    supabase.auth.onAuthStateChange((_event, session) => {\n      setSession(session);\n      if (session) {\n        AsyncStorage.setItem('session', JSON.stringify(session));\n      } else {\n        AsyncStorage.removeItem('session');\n      }\n    });\n  }, []);\n  const signIn = async (email, password) => {\n    const {\n      error\n    } = await supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n    if (error) throw error;\n  };\n  const signOut = async () => {\n    const {\n      error\n    } = await supabase.auth.signOut();\n    if (error) throw error;\n  };\n  const refreshSession = async () => {\n    const {\n      data: {\n        session\n      }\n    } = await supabase.auth.refreshSession();\n    setSession(session);\n  };\n  return _jsxDEV(AuthContext.Provider, {\n    value: {\n      session,\n      loading,\n      signIn,\n      signOut,\n      refreshSession\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) throw new Error('useAuth must be used within AuthProvider');\n  return context;\n};","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","AsyncStorage","supabase","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","session","setSession","loading","setLoading","auth","getSession","then","data","onAuthStateChange","_event","setItem","JSON","stringify","removeItem","signIn","email","password","error","signInWithPassword","signOut","refreshSession","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","useAuth","context","Error"],"sources":["/home/runner/workspace/mobile-fleet-app/src/contexts/AuthContext.tsx"],"sourcesContent":["\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { supabase } from '../lib/supabase';\nimport { Session } from '@supabase/supabase-js';\n\ntype AuthContextType = {\n  session: Session | null;\n  loading: boolean;\n  signIn: (email: string, password: string) => Promise<void>;\n  signOut: () => Promise<void>;\n  refreshSession: () => Promise<void>;\n};\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [session, setSession] = useState<Session | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setSession(session);\n      setLoading(false);\n    });\n\n    supabase.auth.onAuthStateChange((_event, session) => {\n      setSession(session);\n      if (session) {\n        AsyncStorage.setItem('session', JSON.stringify(session));\n      } else {\n        AsyncStorage.removeItem('session');\n      }\n    });\n  }, []);\n\n  const signIn = async (email: string, password: string) => {\n    const { error } = await supabase.auth.signInWithPassword({ email, password });\n    if (error) throw error;\n  };\n\n  const signOut = async () => {\n    const { error } = await supabase.auth.signOut();\n    if (error) throw error;\n  };\n\n  const refreshSession = async () => {\n    const { data: { session } } = await supabase.auth.refreshSession();\n    setSession(session);\n  };\n\n  return (\n    <AuthContext.Provider value={{ session, loading, signIn, signOut, refreshSession }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) throw new Error('useAuth must be used within AuthProvider');\n  return context;\n};\n"],"mappings":";AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,OAAOC,YAAY,MAAM,2CAA2C;AACpE,SAASC,QAAQ,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAW3C,MAAMC,WAAW,GAAGR,aAAa,CAA8BS,SAAS,CAAC;AAEzE,OAAO,SAASC,YAAYA,CAAC;EAAEC;AAAwC,CAAC,EAAE;EACxE,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAiB,IAAI,CAAC;EAC5D,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAE5CE,SAAS,CAAC,MAAM;IACdE,QAAQ,CAACW,IAAI,CAACC,UAAU,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;MAAEC,IAAI,EAAE;QAAEP;MAAQ;IAAE,CAAC,KAAK;MACzDC,UAAU,CAACD,OAAO,CAAC;MACnBG,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;IAEFV,QAAQ,CAACW,IAAI,CAACI,iBAAiB,CAAC,CAACC,MAAM,EAAET,OAAO,KAAK;MACnDC,UAAU,CAACD,OAAO,CAAC;MACnB,IAAIA,OAAO,EAAE;QACXR,YAAY,CAACkB,OAAO,CAAC,SAAS,EAAEC,IAAI,CAACC,SAAS,CAACZ,OAAO,CAAC,CAAC;MAC1D,CAAC,MAAM;QACLR,YAAY,CAACqB,UAAU,CAAC,SAAS,CAAC;MACpC;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,MAAM,GAAG,MAAAA,CAAOC,KAAa,EAAEC,QAAgB,KAAK;IACxD,MAAM;MAAEC;IAAM,CAAC,GAAG,MAAMxB,QAAQ,CAACW,IAAI,CAACc,kBAAkB,CAAC;MAAEH,KAAK;MAAEC;IAAS,CAAC,CAAC;IAC7E,IAAIC,KAAK,EAAE,MAAMA,KAAK;EACxB,CAAC;EAED,MAAME,OAAO,GAAG,MAAAA,CAAA,KAAY;IAC1B,MAAM;MAAEF;IAAM,CAAC,GAAG,MAAMxB,QAAQ,CAACW,IAAI,CAACe,OAAO,CAAC,CAAC;IAC/C,IAAIF,KAAK,EAAE,MAAMA,KAAK;EACxB,CAAC;EAED,MAAMG,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,MAAM;MAAEb,IAAI,EAAE;QAAEP;MAAQ;IAAE,CAAC,GAAG,MAAMP,QAAQ,CAACW,IAAI,CAACgB,cAAc,CAAC,CAAC;IAClEnB,UAAU,CAACD,OAAO,CAAC;EACrB,CAAC;EAED,OACEL,OAAA,CAACC,WAAW,CAACyB,QAAQ;IAACC,KAAK,EAAE;MAAEtB,OAAO;MAAEE,OAAO;MAAEY,MAAM;MAAEK,OAAO;MAAEC;IAAe,CAAE;IAAArB,QAAA,EAChFA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;AAEA,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAC3B,MAAMC,OAAO,GAAGtC,UAAU,CAACM,WAAW,CAAC;EACvC,IAAI,CAACgC,OAAO,EAAE,MAAM,IAAIC,KAAK,CAAC,0CAA0C,CAAC;EACzE,OAAOD,OAAO;AAChB,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}