{"ast":null,"code":"var _jsxFileName = \"/home/runner/workspace/mobile-fleet-app/src/screens/customers/CustomersScreen.tsx\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Text, Card, Searchbar } from 'react-native-paper';\nimport { useQuery } from '@tanstack/react-query';\nimport { supabase } from '../../lib/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CustomersScreen() {\n  const [searchQuery, setSearchQuery] = React.useState('');\n  const {\n    data: customers,\n    isLoading\n  } = useQuery({\n    queryKey: ['customers', searchQuery],\n    queryFn: async () => {\n      const {\n        data,\n        error\n      } = await supabase.from('profiles').select('*').ilike('full_name', `%${searchQuery}%`);\n      if (error) throw error;\n      return data;\n    }\n  });\n  const renderCustomer = ({\n    item\n  }) => _jsxDEV(Card, {\n    style: styles.card,\n    children: _jsxDEV(Card.Content, {\n      children: [_jsxDEV(Text, {\n        variant: \"titleMedium\",\n        children: item.full_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), _jsxDEV(Text, {\n        variant: \"bodyMedium\",\n        children: [\"Email: \", item.email]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), _jsxDEV(Text, {\n        variant: \"bodyMedium\",\n        children: [\"Phone: \", item.phone]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), _jsxDEV(Text, {\n        variant: \"bodyMedium\",\n        children: [\"Status: \", item.status]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n  return _jsxDEV(View, {\n    style: styles.container,\n    children: [_jsxDEV(Searchbar, {\n      placeholder: \"Search customers\",\n      onChangeText: setSearchQuery,\n      value: searchQuery,\n      style: styles.searchbar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), _jsxDEV(FlatList, {\n      data: customers,\n      renderItem: renderCustomer,\n      keyExtractor: item => item.id,\n      contentContainerStyle: styles.list\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5'\n  },\n  searchbar: {\n    margin: 16\n  },\n  list: {\n    padding: 16\n  },\n  card: {\n    marginBottom: 16\n  }\n});","map":{"version":3,"names":["React","View","FlatList","StyleSheet","Text","Card","Searchbar","useQuery","supabase","jsxDEV","_jsxDEV","CustomersScreen","searchQuery","setSearchQuery","useState","data","customers","isLoading","queryKey","queryFn","error","from","select","ilike","renderCustomer","item","style","styles","card","children","Content","variant","full_name","fileName","_jsxFileName","lineNumber","columnNumber","email","phone","status","container","placeholder","onChangeText","value","searchbar","renderItem","keyExtractor","id","contentContainerStyle","list","create","flex","backgroundColor","margin","padding","marginBottom"],"sources":["/home/runner/workspace/mobile-fleet-app/src/screens/customers/CustomersScreen.tsx"],"sourcesContent":["\nimport React from 'react';\nimport { View, FlatList, StyleSheet } from 'react-native';\nimport { Text, Card, Searchbar } from 'react-native-paper';\nimport { useQuery } from '@tanstack/react-query';\nimport { supabase } from '../../lib/supabase';\n\nexport default function CustomersScreen() {\n  const [searchQuery, setSearchQuery] = React.useState('');\n\n  const { data: customers, isLoading } = useQuery({\n    queryKey: ['customers', searchQuery],\n    queryFn: async () => {\n      const { data, error } = await supabase\n        .from('profiles')\n        .select('*')\n        .ilike('full_name', `%${searchQuery}%`);\n      \n      if (error) throw error;\n      return data;\n    }\n  });\n\n  const renderCustomer = ({ item }) => (\n    <Card style={styles.card}>\n      <Card.Content>\n        <Text variant=\"titleMedium\">{item.full_name}</Text>\n        <Text variant=\"bodyMedium\">Email: {item.email}</Text>\n        <Text variant=\"bodyMedium\">Phone: {item.phone}</Text>\n        <Text variant=\"bodyMedium\">Status: {item.status}</Text>\n      </Card.Content>\n    </Card>\n  );\n\n  return (\n    <View style={styles.container}>\n      <Searchbar\n        placeholder=\"Search customers\"\n        onChangeText={setSearchQuery}\n        value={searchQuery}\n        style={styles.searchbar}\n      />\n      \n      <FlatList\n        data={customers}\n        renderItem={renderCustomer}\n        keyExtractor={item => item.id}\n        contentContainerStyle={styles.list}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n  },\n  searchbar: {\n    margin: 16,\n  },\n  list: {\n    padding: 16,\n  },\n  card: {\n    marginBottom: 16,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}