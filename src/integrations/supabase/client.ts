
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Use environment variables from .env
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || "https://vqdlsidkucrownbfuouq.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZxZGxzaWRrdWNyb3duYmZ1b3VxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzQzMDc4NDgsImV4cCI6MjA0OTg4Mzg0OH0.ARDnjN_J_bz74zQfV7IRDrq6ZL5-xs9L21zI3eG6O5Y";

// Create client with improved retry configuration
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
    },
    global: {
      fetch: (...args) => {
        return fetch(...args);
      },
      headers: {
        'x-application-name': 'fleet-management-system',
      },
    },
    // Add retries for better network resiliency
    retryAttempts: 3,
    retryInterval: 1000, // milliseconds
  }
);

// Add a function to test connection
export const testConnection = async (): Promise<boolean> => {
  try {
    const { error } = await supabase.from('vehicles').select('count', { count: 'exact', head: true });
    return !error;
  } catch {
    return false;
  }
};

// Export health check function
export const checkSupabaseHealth = async (): Promise<{ isHealthy: boolean; error?: string }> => {
  try {
    const { error } = await supabase.from('vehicles').select('count', { count: 'exact', head: true });
    
    if (error) {
      console.error('Supabase health check failed:', error);
      return { isHealthy: false, error: error.message };
    }
    
    return { isHealthy: true };
  } catch (err) {
    const errorMessage = err instanceof Error ? err.message : 'Unknown error checking Supabase connection';
    console.error('Supabase connection error:', errorMessage);
    return { isHealthy: false, error: errorMessage };
  }
};
